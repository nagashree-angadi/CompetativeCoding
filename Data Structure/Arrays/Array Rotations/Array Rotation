PROBLEM
Write a function rotate(ar[], d) that rotates arr[] of size n by d elements.

INPUT
arr[] = [1, 2, 3, 4, 5, 6, 7], d = 2, n =7

OUTPUT
[3, 4, 5, 6, 7, 1, 2]

SOLUTIONS

1. Using temprory array
    Input arr[] = [1, 2, 3, 4, 5, 6, 7], d = 2, n =7
    - Store the first d elements in a temp array
        temp[] = [1, 2]
    - Shift rest of the arr[]
        arr[] = [3, 4, 5, 6, 7, 6, 7]
    - Store back the d elements
        arr[] =` [3, 4, 5, 6, 7, 1, 2]

    TIME COMPLEXITY O(N)

2. Without using extra space, left rotate by one everytime

    void leftRotatebyOne(int[] arr) { 
        int temp = arr[0];
        int i;

        for (i = 0; i < arr.length - 1; i++) 
            arr[i] = arr[i + 1]; 
    
        arr[i] = temp; 
    } 
  
    void leftRotate(int[] arr, int d) { 
        for (int i = 0; i < d; i++) 
            leftRotatebyOne(arr); 
    } 

    TIME COMPLEXITY O(N*D)

3. Reversal algorithm for array rotation

    void reverseArray( int[] arr, int start, int end){
        while(start < end){
            int temp = arr[end];
            arr[end] = arr[start];
            arr[start] = temp;
            start ++;
            end --; 
        }
    }
    void leftRotate(int[] arr, int d) { 
        reverseArray(arr, 0,  d-1);
        reverseArray(arr, d-1, arr.length-1);
        reverseArray(arr, 0, arr.length-1);
    } 

    TIME COMPLEXITY O(N)



